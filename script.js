// Dark mode switch
function darkMode() {
    const body = document.body;
    const icon = document.getElementById('darkModeIcon');
    
    body.classList.toggle('dark-mode');
    
    // Toggle icon between moon and sun
    if (body.classList.contains('dark-mode')) {
        icon.classList.remove('bi-moon-stars-fill');
        icon.classList.add('bi-sun-fill');
    } else {
        icon.classList.remove('bi-sun-fill');
        icon.classList.add('bi-moon-stars-fill');
    }
}

let historyCount = 0;

// H√†m x√≥a d·ªØ li·ªáu trong c√°c input
function clearInputs() {
    // L·∫•y t·∫•t c·∫£ c√°c input type="text" v√† ƒë·∫∑t gi√° tr·ªã v·ªÅ tr·ªëng
    document.querySelectorAll('input[type="text"]').forEach(input => input.value = '');
    
    // L·∫•y t·∫•t c·∫£ c√°c select v√† ƒë·∫∑t gi√° tr·ªã v·ªÅ m·∫∑c ƒë·ªãnh (gi√° tr·ªã ƒë·∫ßu ti√™n)
    document.querySelectorAll('select').forEach(select => select.selectedIndex = 0);
}

// H√†m ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ nh·∫≠p
function validateInputs() {



    const setCount = parseInt(document.getElementById('set-price').value);
    if (!setCount) return true; // If no set count selected, skip validation
    
    let itemCount = 0;
    
    // Count items that have at least one field filled
    const sections = ['top', 'bottom', 'coat', 'other'];
    sections.forEach(section => {
        const type = document.getElementById(`${section}-type`);
        if (type && type.value) itemCount++;
    });
    

    // Check if #other-name is filled
    const otherName = document.getElementById('other-name');
    if (otherName && otherName.value.trim() === '') {
        showValidationModal('Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m trong m·ª•c "Kh√°c".');
        return false;
    }
    else {
        itemCount++;
    }

    if (itemCount < setCount) {
        showValidationModal(
            `B·∫°n ch·ªçn ${setCount} s·∫£n ph·∫©m nh∆∞ng ch·ªâ nh·∫≠p ${itemCount}.\nVui l√≤ng nh·∫≠p th√™m ${setCount - itemCount} m√≥n n·ªØa.`
        );
        return false;
    }

    return true;
}


// Add this new function
function showValidationModal(message) {
    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.className = 'validation-modal-container';
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.className = 'validation-modal-content';
    
    // Add message
    const messageElement = document.createElement('p');
    messageElement.textContent = message;
    
    // Add close button
    const closeButton = document.createElement('button');
    closeButton.className = 'btn btn-primary';
    closeButton.textContent = 'Ok';
    closeButton.onclick = () => modalContainer.remove();
    
    // Assemble modal
    modalContent.appendChild(messageElement);
    modalContent.appendChild(closeButton);
    modalContainer.appendChild(modalContent);
    document.body.appendChild(modalContainer);
}

// H√†m x·ª≠ l√Ω t·∫°o k·∫øt qu·∫£
document.getElementById('generate-output').addEventListener('click', function () {

    // Get set quantity
    const setPrice = document.getElementById('set-price').value;

    if (!setPrice) {
        showValidationModal('Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong set!');
        return;
    }
    
    if (!validateInputs()) return; // Stop if validation fails
    
    //Get top value
    const topType = document.getElementById('top-type').value;
    const fitTop = document.getElementById('fit-top').value;
    const topChest = document.getElementById('top-chest').value;
    const topWaist = document.getElementById('top-waist').value;
    const topLength = document.getElementById('top-length').value;
    const topArmpit = document.getElementById('top-armpit').value;
    const topDefect = document.getElementById('top-defect').value;

    //Get top2 value
    // L·∫•y gi√° tr·ªã t·ª´ c√°c ph·∫ßn t·ª≠ DOM, v√† cho ph√©p ch√∫ng c√≥ th·ªÉ l√† null n·∫øu kh√¥ng c√≥ gi√° tr·ªã
    const top2Type = document.getElementById('top2-type')?.value || null;
    const fit2Top = document.getElementById('fit2-top')?.value || null;
    const top2Chest = document.getElementById('top2-chest')?.value || null;
    const top2Waist = document.getElementById('top2-waist')?.value || null;
    const top2Length = document.getElementById('top2-length')?.value || null;
    const top2Armpit = document.getElementById('top2-armpit')?.value || null;
    const top2Defect = document.getElementById('top2-defect')?.value || null;

    // Get bottom value
    const bottomType = document.getElementById('bottom-type').value;
    const fitBottom = document.getElementById('fit-bottom').value;
    const bottomWaist = document.getElementById('bottom-waist').value;
    const bottomLength = document.getElementById('bottom-length').value;
    const bottomThigh = document.getElementById('bottom-thigh').value;
    const bottomDefect = document.getElementById('bottom-defect').value;

    // Get coat value
    const coatType = document.getElementById('coat-type').value;
    const fitCoat = document.getElementById('fit-coat').value;
    const coatArmpit = document.getElementById('coat-armpit').value;
    const coatLength = document.getElementById('coat-length').value;
    const coatDefect = document.getElementById('coat-defect').value;

    const otherName = document.getElementById('other-name')?.value || null;
    const fitOther = document.getElementById('other-fit')?.value || null;
    const otherChest = document.getElementById('other-chest')?.value || null;
    const otherButt = document.getElementById('other-butt')?.value || null;
    const otherWaist = document.getElementById('other-waist')?.value || null;
    const otherHip = document.getElementById('other-hip')?.value || null;
    const otherLength = document.getElementById('other-length')?.value || null;
    const otherArmpit = document.getElementById('other-armpit')?.value || null;
    const otherThigh = document.getElementById('other-thigh')?.value || null;
    const otherDefect = document.getElementById('other-defect')?.value || null;
    
    let resultDisplay = "";

    // Add set quantity
    resultDisplay += getSetQuantity(setPrice);

    // Th√™m th√¥ng tin Top
    if(setPrice == '1') {
        resultDisplay += getSingleTopInfo(fitTop, topChest, topWaist, topLength, topArmpit, topDefect);
    }
    else {
        resultDisplay += getTopInfo(topType, fitTop, topChest, topWaist, topLength, topArmpit, topDefect);
    }
    
    // Th√™m th√¥ng tin Top2
    resultDisplay += getTop2Info(top2Type, fit2Top, top2Chest, top2Waist, top2Length, top2Armpit, topDefect);

    // Th√™m th√¥ng tin Bottom
    resultDisplay += getBottomInfo(bottomType, fitBottom, bottomWaist, bottomLength, bottomThigh, bottomDefect);

    // Th√™m th√¥ng tin Coat
    resultDisplay += getCoatInfo(coatType, fitCoat, coatArmpit, coatLength, coatDefect);

    // Th√™m th√¥ng tin cho s·∫£n ph·∫©m kh√°c
    resultDisplay += getOtherInfo(otherName, fitOther, otherChest, otherButt, otherWaist, otherHip, otherLength, otherArmpit, otherThigh, otherDefect);


    document.getElementById('output').textContent = resultDisplay;

    const fullOutput = `${resultDisplay}\n‚ÄºÔ∏èùêÄùê≠ùê≠ùêûùêßùê≠ùê¢ùê®ùêß‚ÄºÔ∏è
    ùë∑ùíìùíäùíêùíìùíäùíïùíö ùë™ùíêùíéùíéùíÜùíèùíï: Payment within 12 hours.
    ùë∑ùíìùíêùíÖùíñùíÑùíï ùë´ùíÜùíïùíÇùíäùíçùíî: Check each post carefully before buying.
    ùë∫ùíÜùíÑùíêùíèùíÖùíâùíÇùíèùíÖ ùë∞ùíïùíÜùíéùíî: May have minor flaws not visible in pictures.
    ùëºùíèùíÉùíêùíôùíäùíèùíà: Record a video when opening the package.
    ùëµùíê ùëπùíÜùíïùíñùíìùíè/ùëπùíÜùíáùíñùíèùíÖ: Except for serious defects with unboxing video proof.`;

    addToHistory(fullOutput);
    
    // X√≥a d·ªØ li·ªáu input
    clearInputs();
});

function getSetQuantity(setPrice) {
    var result = "";
        switch (setPrice) { 
        case '1':
            result += `‚ú®\nüéÄùêèùê´ùê¢ùêúùêû: \n`;
            break;
        case '2': 
            result += `‚ú®\nüéÄùêíùêûùê≠ ùê©ùê´ùê¢ùêúùêû ùüêùê©ùêúùê¨: \n`;
            break;
        case '3': 
            result += `‚ú®\nüéÄùêíùêûùê≠ ùê©ùê´ùê¢ùêúùêû ùüëùê©ùêúùê¨: \n`;
            break;
        case '4': 
            result += `‚ú®\nüéÄùêíùêûùê≠ ùê©ùê´ùê¢ùêúùêû ùüíùê©ùêúùê¨: \n`;
            break;
        default:
    }
    return result;
}

// Add Top information
const getTopInfo = (topType, fitTop, topChest, topWaist, topLength, topArmpit, topDefect) => {
    let result = "";
    if(topType){ // Ki·ªÉm tra n·∫øu topType kh√¥ng ph·∫£i l√† chu·ªói r·ªóng
        result += `${convertToBoldUnicode(topType)}:\n`;
        if (topDefect) result += `${topDefect}\n`;
        if (fitTop) result += `  - Fit: ${fitTop}\n`;
        if (topChest) result += `  - Ng·ª±c / Chest: ${topChest}cm\n`;
        if (topWaist) result += `  - Eo / Waist: ${topWaist}cm\n`;
        if (topLength) result += `  - D√†i / Length: ${topLength}cm\n`;
        if (topArmpit) result += `  - V√≤ng n√°ch / Armpit: ${topArmpit}cm\n`;
    } 
    return result;
}

const getSingleTopInfo = (fitTop, topChest, topWaist, topLength, topArmpit, topDefect) => {
    var result = ""
    if (topDefect) result += `${topDefect}\n`;
    if (fitTop)  {
        if(fitTop != "Freesize") result += `  - Fit: ${fitTop}\n`;
        else result += `  - Freesize\n`;
    }
    if (topChest) result += `- Ng·ª±c / Chest: ${topChest}cm\n`;
    if (topWaist) result += `- Eo / Waist: ${topWaist}cm\n`;
    if (topLength) result += `- D√†i / Length: ${topLength}cm\n`;
    if (topArmpit) result += `- V√≤ng n√°ch / Armpit: ${topArmpit}cm`;
    return result;
}

const getTop2Info = (top2Type, fit2Top, top2Chest, top2Waist, top2Length, top2Armpit, top2Defect) => {
    let result = "";
    if(top2Type) { // Ki·ªÉm tra n·∫øu top2Type kh√¥ng ph·∫£i l√† chu·ªói r·ªóng
    result += `${convertToBoldUnicode(top2Type)}:\n`;
    if (top2Defect) result += `${top2Defect}\n`;
    if (fit2Top)  {
        if(fit2Top != "Freesize") result += `  - Fit: ${fit2Top}\n`;
        else result += `  - Freesize\n`;
    }
        
    if (top2Chest) result += `  - Ng·ª±c / Chest: ${top2Chest}cm\n`;
    if (top2Waist) result += `  - Eo / Waist: ${top2Waist}cm\n`;
    if (top2Length) result += `  - D√†i / Length: ${top2Length}cm\n`;
    if (top2Armpit) result += `  - V√≤ng n√°ch / Armpit: ${top2Armpit}cm\n`;
    }
    return result;
}

// Add Bottom information
const getBottomInfo = (bottomType, fitBottom, bottomWaist, bottomLength, bottomThigh, bottomDefect) => {
    let result = "";
    if(bottomType) { // Ki·ªÉm tra n·∫øu bottomType kh√¥ng ph·∫£i l√† chu·ªói r·ªóng
        result += `${convertToBoldUnicode(bottomType)}:\n`;
        if (bottomDefect) result += `${bottomDefect}\n`;
        if (fitBottom) result += `  - Fit: ${fitBottom}\n`;
        if (bottomWaist) result += `  - Eo / Waist: ${bottomWaist}cm\n`;
        if (bottomLength) result += `  - D√†i / Length: ${bottomLength}cm\n`;
        if (bottomThigh) result += `  - ƒê√πi / Thigh: ${bottomThigh}cm\n`;
    }

    return result;
}

//  Add Coat information
const getCoatInfo = (coatType, fitCoat, coatArmpit, coatLength, coatDefect) => {
    let result = "";
    if (coatType) { // Ki·ªÉm tra n·∫øu coatType kh√¥ng ph·∫£i l√† chu·ªói r·ªóng
        result += `${convertToBoldUnicode(coatType)}:\n`;
        if (coatDefect) result += `${coatDefect}\n`;
        if (fitCoat) result += `  - Fit: ${fitCoat}\n`;
        if (coatArmpit) result += `  - V√≤ng n√°ch / Armpit: ${coatArmpit}cm\n`;
        if (coatLength) result += `  - D√†i / Length: ${coatLength}cm\n`;
    }
    return result;
};



const getOtherInfo = (otherName, fitOther, otherChest, otherButt, otherWaist, otherHip, otherLength, otherArmpit, otherThigh, otherDefect) => {
    var result = `${convertToBoldUnicode(otherName)}`;
    if (otherName) result += `:\n`;
    if (otherDefect) result += `${otherDefect}\n`;
    if (fitOther) result += `  - Fit: ${fitOther}\n`;
    if (otherChest) result += `  - Ng·ª±c / Chest: ${otherChest}cm\n`;
    if (otherButt) result += `  - M√¥ng / Butt: ${otherButt}cm\n`; 
    if (otherWaist) result += `  - Eo / Waist: ${otherWaist}cm\n`;
    if (otherHip) result += `  - H√¥ng / Hip: ${otherHip}cm\n`;
    if (otherLength) result += `  - D√†i / Length: ${otherLength}cm\n`;
    if (otherArmpit) result += `  - V√≤ng n√°ch / Armpit: ${otherArmpit}cm\n`;
    if (otherThigh) result += `  - ƒê√πi / Thigh: ${otherThigh}cm\n`;
    return result;
}

// H√†m sao ch√©p k·∫øt qu·∫£
var copyOutput = document.getElementById('copy-output')
copyOutput.addEventListener('click', function () {
    copyToClipboardWithIndex(document.getElementById('output').textContent, 'K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c sao ch√©p!');
});

// Th√™m k·∫øt qu·∫£ v√†o l·ªãch s·ª≠
function addToHistory(fullOutput) {
    historyCount++;
    const historyList = document.getElementById('history-list');

    const historyItem = document.createElement('li');
    historyItem.className = 'list-group-item';
    historyItem.dataset.index = historyCount;

    historyItem.innerHTML = `
        <strong>#${historyCount}:</strong>
        <pre class="history-content">${fullOutput}</pre>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-success me-2 rounded-pill px-3 py-2" onclick="copyHistoryItem(${historyCount})">Sao ch√©p</button>
            <button class="btn btn-sm btn-outline-warning me-2 rounded-pill px-3 py-2" onclick="editHistory(${historyCount})">S·ª≠a</button>
            <button class="btn btn-sm btn-outline-danger me-2 rounded-pill px-3 py-2" onclick="deleteHistory(${historyCount})">X√≥a</button>
        </div>
        <div class="edit-container d-none mt-2">
            <textarea class="form-control mb-2 inter-body">${fullOutput}</textarea>
            <div class="btn-group">
                <button class="btn btn-sm btn-outline-primary me-2 rounded-pill px-3 py-2" onclick="saveEdit(${historyCount})">L∆∞u</button>
                <button class="btn btn-sm btn-outline-secondary rounded-pill px-3 py-2" onclick="cancelEdit(${historyCount})">H·ªßy</button>
            </div>
        </div>
    `;

    historyList.appendChild(historyItem);
}

// Sao ch√©p t·ª´ng m·ª•c l·ªãch s·ª≠
function copyHistoryItem(index) {
    const historyItem = document.querySelector(`#history-list li[data-index="${index}"]`);
    if (historyItem) {
        copyToClipboardWithIndex(historyItem.querySelector('.history-content').textContent, `L·ªãch s·ª≠ #${index} ƒë√£ ƒë∆∞·ª£c sao ch√©p!`, index);
    }
}

// X√≥a l·ªãch s·ª≠
function deleteHistory(index) {
    const itemToRemove = document.querySelector(`#history-list li[data-index="${index}"]`);
    if (itemToRemove) {
        itemToRemove.remove();
        updateHistoryNumbers();
    }
}

// Sao ch√©p to√†n b·ªô l·ªãch s·ª≠
document.getElementById('copy-history').addEventListener('click', function () {
    const allHistoryItems = document.querySelectorAll('#history-list li pre');
    const historyText = Array.from(allHistoryItems).map((item, index) => `#${index + 1}:\n${item.textContent}`).join('\n\n');
    copyToClipboardWithIndex(historyText, 'To√†n b·ªô l·ªãch s·ª≠ ƒë√£ ƒë∆∞·ª£c sao ch√©p!');
});

// H√†m sao ch√©p v√†o clipboard v·ªõi s·ªë th·ª© t·ª±
function copyToClipboardWithIndex(text, successMessage, index) {
    const tempTextArea = document.createElement('textarea');
    tempTextArea.value = `#${index}:\n${text}`;
    document.body.appendChild(tempTextArea);
    tempTextArea.select();
    document.execCommand('copy');
    document.body.removeChild(tempTextArea);
    alert(successMessage);
}

// C·∫≠p nh·∫≠t s·ªë th·ª© t·ª± sau khi x√≥a
function updateHistoryNumbers() {
    const allItems = document.querySelectorAll('#history-list li');
    historyCount = 0; // Reset l·∫°i s·ªë th·ª© t·ª±
    allItems.forEach(item => {
        historyCount++;
        item.dataset.index = historyCount;
        const strongTag = item.querySelector('strong');
        if (strongTag) strongTag.textContent = `#${historyCount}:`;
    });
}

// Th√™m v√†o Top ph·ª•
document.addEventListener("DOMContentLoaded", () => {
    const topTypeElement = document.getElementById("top-type");
    const generateOutputButton = document.getElementById("generate-output");
    const topSection = document.querySelector('section:nth-of-type(1) > .row.g-3');

    // H√†m th√™m HTML
    const addInnerOrOuterHtml = () => {
        const newHtml = `
            <div style="padding-top: 2rem; padding-bottom:0.1rem;" class="row g-3" id="additional-html">
            <hr class="w-70 mx-auto">
            <h5>Addition</h5>
                <div class="col-md-6">
                    <label for="top2-type" class="form-label inter-body">Ch·ªçn lo·∫°i:</label>
                    <select id="top2-type" class="form-select inter-body">
                        <option value="">Kh√¥ng ch·ªçn</option>
                        <option value="Top">Top</option>
                        <option value="Cami">Cami</option>
                        <option value="Inner Top">Inner Top</option>
                        <option value="Outer Top">Outer Top</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="fit2-top" class="form-label inter-body">Ch·ªçn k√≠ch c·ª° (t√πy ch·ªçn):</label>
                    <select id="fit2-top" class="form-select inter-body">
                        <option value="">Kh√¥ng ch·ªçn</option>
                        <option value="Freesize">Freesize</option>
                        <option value="XS">XS</option>
                        <option value="S">S</option>
                        <option value="S">XS/S</option>
                        <option value="S/M">S/M</option>
                        <option value="S">M</option>
                        <option value="M/L">M/L</option>
                        <option value="L">L</option>
                        <option value="S">L/XL</option>
                        <option value="XL">XL</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="top2-chest" class="form-label inter-body">Ng·ª±c / Chest:</label>
                    <input type="text" id="top2-chest" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                </div>
                <div class="col-md-4">
                    <label for="top2-waist" class="form-label inter-body">Eo / Waist:</label>
                    <input type="text" id="top2-waist" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                </div>
                <div class="col-md-4">
                    <label for="top2-length" class="form-label inter-body">D√†i / Length:</label>
                    <input type="text" id="top2-length" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                </div>
                <div class="col-md-4">
                    <label for="top2-defect" class="form-label inter-body">Defect:</label>
                    <input type="text" id="top2-defect" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                </div>
            </div>`;

        const existingHtml = document.getElementById("additional-html");
        // Ki·ªÉm tra n·∫øu HTML ch∆∞a ƒë∆∞·ª£c th√™m v√†o th√¨ m·ªõi th√™m
        if (!existingHtml) {
            topSection.insertAdjacentHTML("afterend", newHtml);
        }
    };

    // H√†m x√≥a HTML
    const removeInnerOrOuterHtml = () => {
        const additionalHtml = document.getElementById("additional-html");
        if (additionalHtml) {
            additionalHtml.remove();
        }
    };

    // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi trong top-type
    topTypeElement.addEventListener("change", (e) => {
        const selectedValue = e.target.value;

        // N·∫øu ch·ªçn Inner Top ho·∫∑c Outer Top, th√™m HTML n·∫øu ch∆∞a c√≥
        if (selectedValue === "Inner Top" || selectedValue === "Outer Top") {
            addInnerOrOuterHtml();
        } else {
            // N·∫øu ch·ªçn lo·∫°i kh√°c, x√≥a HTML n·∫øu ƒë√£ th√™m
            removeInnerOrOuterHtml();
        }
    });

    // X√≥a HTML khi nh·∫•n "T·∫°o K·∫øt Qu·∫£"
    generateOutputButton.addEventListener("click", () => {
        removeInnerOrOuterHtml();  // X√≥a HTML n·∫øu c√≥
    });
});

// Ph·∫ßn th√™m s·∫£n ph·∫©m kh√°c

    // L·∫•y n√∫t "Th√™m Section"
    const addSectionButton = document.getElementById('add-section');

    // L·∫Øng nghe s·ª± ki·ªán click c·ªßa n√∫t "Th√™m Section"
    addSectionButton.addEventListener('click', function () {
        // ƒêo·∫°n HTML c·∫ßn th√™m v√†o
        const newHtml = `
            <section class="mb-4 shadow-box" id="new-section">
                <h2 class="inter-title">Kh√°c</h2>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="other-name" class="form-label inter-body">T√™n s·∫£n ph·∫©m / Product's name:</label>
                        <input type="text" id="other-name" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-6">
                        <label for="other-fit" class="form-label inter-body">Ch·ªçn k√≠ch c·ª°:</label>
                        <select id="other-fit" class="form-select inter-body">
                            <option value="">Kh√¥ng ch·ªçn</option>
                            <option value="Freesize">Freesize</option>
                            <option value="XS">XS</option>
                            <option value="S">S</option>
                            <option value="S">XS/S</option>
                            <option value="S/M">S/M</option>
                            <option value="S">M</option>
                            <option value="M/L">M/L</option>
                            <option value="L">L</option>
                            <option value="S">L/XL</option>
                            <option value="XL">XL</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="other-chest" class="form-label inter-body">Ng·ª±c / Chest:</label>
                        <input type="text" id="other-chest" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    
                    <div class="col-md-4">
                        <label for="other-waist" class="form-label inter-body">Eo / Waist:</label>
                        <input type="text" id="other-waist" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                        <label for="other-hip" class="form-label inter-body">H√¥ng / Hip</label>
                        <input type="text" id="other-hip" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                        <label for="other-butt" class="form-label inter-body">M√¥ng / Butt</label>
                        <input type="text" id="other-butt" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                        <label for="other-thigh" class="form-label inter-body">ƒê√πi / Thigh</label>
                        <input type="text" id="other-thigh" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                        <label for="other-length" class="form-label inter-body">D√†i / Length:</label>
                        <input type="text" id="other-length" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                        <label for="other-armpit" class="form-label inter-body">V√≤ng n√°ch / Armpit:</label>
                        <input type="text" id="other-armpit" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                    </div>
                    <div class="col-md-4">
                    <label for="other-defect" class="form-label inter-body">Defect:</label>
                    <input type="text" id="other-defect" class="form-control inter-body" placeholder="Nh·∫≠p s·ªë">
                </div>
                </div>
                <!-- N√∫t X√≥a ph·∫ßn HTML -->
                <button class="btn btn-danger mt-3" onclick="deleteSection(this)">X√≥a</button>
            </section>`;

        // Th√™m HTML v√†o v√πng ch·ª©a
        document.getElementById('section-container').insertAdjacentHTML('beforeend', newHtml);

        // ·∫®n n√∫t "Th√™m Section" sau khi th√™m ph·∫ßn t·ª≠ HTML
        addSectionButton.style.display = 'none';
    });

    // H√†m ƒë·ªÉ x√≥a ph·∫ßn HTML
    function deleteSection(button) {
        const sectionToRemove = button.closest('section');
        sectionToRemove.remove();

        // Hi·ªán l·∫°i n√∫t "Th√™m Section" sau khi x√≥a ph·∫ßn t·ª≠ HTML
        addSectionButton.style.display = 'inline-block';
    }

// Chuy·ªÉn ƒë·ªïi ph√¥ng ch·ªØ tr·ª±c ti·∫øp
function convertToBoldUnicode(inputText) {
    if (!inputText) return '';  // Return an empty string if input is empty

    // Mapping for converting normal characters to bold unicode
    const boldMap = {
        'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
        'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
        'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
        'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
        'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
        'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
        '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó',
        
        // Vietnamese uppercase characters
        '√Ä': 'ùêÄÃÄ', '√Å': 'ùêÄÃÅ', '·∫¢': 'ùêÄÃâ', '√É': 'ùêÄÃÉ', '·∫†': 'ùêÄÃ£',
        '√à': 'ùêÑÃÄ', '√â': 'ùêÑÃÅ', '·∫∫': 'ùêÑÃâ', '·∫º': 'ùêÑÃÉ', '·∫∏': 'ùêÑÃ£',
        '√å': 'ùêºÃÄ', '√ç': 'ùêºÃÅ', '·ªà': 'ùêºÃâ', 'ƒ®': 'ùêºÃÉ', '·ªä': 'ùêºÃ£',
        '√í': 'ùëÇÃÄ', '√ì': 'ùëÇÃÅ', '·ªé': 'ùëÇÃâ', '√ï': 'ùëÇÃÉ', '·ªå': 'ùëÇÃ£',
        '√ô': 'ùëàÃÄ', '√ö': 'ùëàÃÅ', '·ª¶': 'ùëàÃâ', '≈®': 'ùëàÃÉ', '·ª§': 'ùëàÃ£',
        '·ª≤': 'ùëåÃÄ', '√ù': 'ùëåÃÅ', '·ª∂': 'ùëåÃâ', '·ª∏': 'ùëåÃÉ', '·ª¥': 'ùëåÃ£',
        'ƒê': 'ùê∑', '√ä': 'ùê∏ÃÇ', '√î': 'ùëÇÃÇ', '∆†': 'ùëÇÃõ', '∆Ø': 'ùëàÃõ',
        
        // Vietnamese lowercase characters
        '√†': 'ùêöÃÄ', '√°': 'ùêöÃÅ', '·∫£': 'ùêöÃâ', '√£': 'ùêöÃÉ', '·∫°': 'ùêöÃ£',
        '√®': 'ùêûÃÄ', '√©': 'ùêûÃÅ', '·∫ª': 'ùêûÃâ', '·∫Ω': 'ùêûÃÉ', '·∫π': 'ùêûÃ£',
        '√¨': 'ùëñÃÄ', '√≠': 'ùëñÃÅ', '·ªâ': 'ùëñÃâ', 'ƒ©': 'ùëñÃÉ', '·ªã': 'ùëñÃ£',
        '√≤': 'ùëúÃÄ', '√≥': 'ùëúÃÅ', '·ªè': 'ùëúÃâ', '√µ': 'ùëúÃÉ', '·ªç': 'ùëúÃ£',
        '√π': 'ùë¢ÃÄ', '√∫': 'ùë¢ÃÅ', '·ªß': 'ùë¢Ãâ', '≈©': 'ùë¢ÃÉ', '·ª•': 'ùë¢Ã£',
        '·ª≥': 'ùë¶ÃÄ', '√Ω': 'ùë¶ÃÅ', '·ª∑': 'ùë¶Ãâ', '·ªπ': 'ùë¶ÃÉ', '·ªµ': 'ùë¶Ã£',
        'ƒë': 'ùëë', '√™': 'ùëíÃÇ', '√¥': 'ùëúÃÇ', '∆°': 'ùëúÃõ', '∆∞': 'ùë¢Ãõ',
    };    

    const boldText = Array.from(inputText).map(char => boldMap[char] || char).join('');
    return boldText;
}

// Add these new functions for editing functionality
function editHistory(index) {
    const historyItem = document.querySelector(`#history-list li[data-index="${index}"]`);
    const editContainer = historyItem.querySelector('.edit-container');
    const content = historyItem.querySelector('.history-content');
    
    editContainer.classList.remove('d-none');
    content.classList.add('d-none');
}

function saveEdit(index) {
    const historyItem = document.querySelector(`#history-list li[data-index="${index}"]`);
    const editContainer = historyItem.querySelector('.edit-container');
    const content = historyItem.querySelector('.history-content');
    const textarea = editContainer.querySelector('textarea');
    
    content.textContent = textarea.value;
    editContainer.classList.add('d-none');
    content.classList.remove('d-none');
}

function cancelEdit(index) {
    const historyItem = document.querySelector(`#history-list li[data-index="${index}"]`);
    const editContainer = historyItem.querySelector('.edit-container');
    const content = historyItem.querySelector('.history-content');
    const textarea = editContainer.querySelector('textarea');
    
    textarea.value = content.textContent;
    editContainer.classList.add('d-none');
    content.classList.remove('d-none');
}
